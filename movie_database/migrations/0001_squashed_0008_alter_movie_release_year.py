# Generated by Django 5.2.4 on 2025-07-19 04:43

import django.core.validators
import django.db.models.deletion
from django.apps.registry import Apps
from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# movie_database.migrations.0003_add_media_dimensions


def add_bluray_dimensions(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:  # noqa: ARG001
    """Add Blu-ray dimensions to the MediaCaseDimensions model."""
    MediaCaseDimensions = apps.get_model("movie_database", "MediaCaseDimensions")

    # Define Blu-ray standards in mm (W x H x D)
    dimensions_to_add: list[dict[str, str | float]] = [
        {
            "media_format": "BD",
            "description": "Blu-ray (US Standard)",
            "width": 128.50,
            "height": 148.00,
            "depth": 12.00,
        },
        {
            "media_format": "BD",
            "description": "Blu-ray (UK Standard)",
            "width": 148.00,
            "height": 129.00,
            "depth": 14.00,
        },
        {
            "media_format": "DVD",
            "description": "DVD (Standard)",
            "width": 130.00,
            "height": 184.00,
            "depth": 14.00,
        },
    ]

    for dims in dimensions_to_add:
        MediaCaseDimensions.objects.update_or_create(
            **dims,
        )


class Migration(migrations.Migration):
    replaces = [
        ("movie_database", "0001_initial"),
        ("movie_database", "0002_bookcase_mediacasedimensions_alter_collection_name_and_more"),
        ("movie_database", "0003_add_media_dimensions"),
        ("movie_database", "0004_alter_bookcase_description_alter_bookcase_location"),
        ("movie_database", "0005_physicalmedia_case_dimensions"),
        ("movie_database", "0006_remove_physicalmedia_media_format"),
        ("movie_database", "0007_remove_collection_movies_collection_physical_media_and_more"),
        ("movie_database", "0008_alter_movie_release_year"),
    ]

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Movie",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=255)),
                (
                    "release_year",
                    models.PositiveSmallIntegerField(
                        validators=[django.core.validators.MinValueValidator(1888), django.core.validators.MaxValueValidator(2100)],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Bookcase",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("location", models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="MediaCaseDimensions",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("media_format", models.CharField(choices=[("DVD", "DVD"), ("BD", "Blu-ray"), ("VHS", "VHS"), ("4K", "4K UHD")], max_length=3)),
                ("description", models.CharField(max_length=255)),
                ("width", models.DecimalField(decimal_places=2, max_digits=5)),
                ("height", models.DecimalField(decimal_places=2, max_digits=5)),
                ("depth", models.DecimalField(decimal_places=2, max_digits=5)),
            ],
            options={
                "verbose_name": "Media Case Dimensions",
                "verbose_name_plural": "Media Case Dimensions",
            },
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                ("movies", models.ManyToManyField(to="movie_database.movie")),
            ],
        ),
        migrations.CreateModel(
            name="Shelf",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("position_from_top", models.PositiveSmallIntegerField()),
                ("bookcase", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="shelves", to="movie_database.bookcase")),
            ],
            options={
                "ordering": ("position_from_top",),
            },
        ),
        migrations.CreateModel(
            name="PhysicalMedia",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("position_on_shelf", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("media_format", models.CharField(choices=[("DVD", "DVD"), ("BD", "Blu-ray"), ("VHS", "VHS"), ("4K", "4K UHD")], max_length=3)),
                ("notes", models.TextField(blank=True)),
                ("movies", models.ManyToManyField(related_name="media_copies", to="movie_database.movie")),
                ("shelf", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="movie_database.shelf")),
            ],
            options={
                "verbose_name": "Physical Media",
                "verbose_name_plural": "Physical Media",
                "ordering": ("shelf__position_from_top", "position_on_shelf"),
            },
        ),
        migrations.AddConstraint(
            model_name="shelf",
            constraint=models.UniqueConstraint(fields=("bookcase", "position_from_top"), name="unique_shelf_position_from_top"),
        ),
        migrations.AddConstraint(
            model_name="physicalmedia",
            constraint=models.UniqueConstraint(fields=("shelf", "position_on_shelf"), name="unique_position_on_shelf"),
        ),
        migrations.RunPython(
            code=add_bluray_dimensions,
        ),
        migrations.AlterField(
            model_name="bookcase",
            name="description",
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name="bookcase",
            name="location",
            field=models.CharField(max_length=255),
        ),
        migrations.AddField(
            model_name="physicalmedia",
            name="case_dimensions",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="media_dimensions",
                to="movie_database.mediacasedimensions",
            ),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name="physicalmedia",
            name="media_format",
        ),
        migrations.RemoveField(
            model_name="collection",
            name="movies",
        ),
        migrations.AddField(
            model_name="collection",
            name="physical_media",
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name="collections", to="movie_database.physicalmedia"),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="TMDbProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("tmdb_id", models.PositiveIntegerField(unique=True)),
                ("adult", models.BooleanField(default=False)),
                ("movie", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name="tmdb", to="movie_database.movie")),
            ],
        ),
        migrations.AlterField(
            model_name="movie",
            name="release_year",
            field=models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1888), django.core.validators.MaxValueValidator(2100)]),
        ),
    ]
