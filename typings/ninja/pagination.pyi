"""This type stub file was generated by pyright."""

from abc import ABC, abstractmethod
from collections.abc import Callable
from typing import Any

from django.db.models import QuerySet
from ninja import Router, Schema
from ninja.operation import Operation

class PaginationBase(ABC):
    class Input(Schema): ...

    InputSource = ...
    class Output(Schema):
        items: list[Any]
        count: int

    items_attribute: str = ...
    def __init__(self, *, pass_parameter: str | None = ..., **kwargs: Any) -> None: ...
    @abstractmethod
    def paginate_queryset(self, queryset: QuerySet, pagination: Any, **params: Any) -> Any: ...

class AsyncPaginationBase(PaginationBase):
    @abstractmethod
    async def apaginate_queryset(self, queryset: QuerySet, pagination: Any, **params: Any) -> Any: ...

class LimitOffsetPagination(AsyncPaginationBase):
    class Input(Schema):
        limit: int = ...
        offset: int = ...

    def paginate_queryset(self, queryset: QuerySet, pagination: Input, **params: Any) -> Any: ...
    async def apaginate_queryset(self, queryset: QuerySet, pagination: Input, **params: Any) -> Any: ...

class PageNumberPagination(AsyncPaginationBase):
    class Input(Schema):
        page: int = ...
        page_size: int | None = ...

    def __init__(self, page_size: int = ..., max_page_size: int = ..., **kwargs: Any) -> None: ...
    def paginate_queryset(self, queryset: QuerySet, pagination: Input, **params: Any) -> Any: ...
    async def apaginate_queryset(self, queryset: QuerySet, pagination: Input, **params: Any) -> Any: ...

def paginate(func_or_pgn_class: Any = ..., **paginator_params: Any) -> Callable:
    """@api.get(...
    @paginate
    def my_view(request):

    or

    @api.get(...
    @paginate(PageNumberPagination)
    def my_view(request):

    """

class RouterPaginated(Router):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def add_api_operation(self, path: str, methods: list[str], view_func: Callable, **kwargs: Any) -> None: ...

def make_response_paginated(paginator: PaginationBase, op: Operation) -> None:
    """Takes operation response and changes it to the paginated response
    for example:
        response=List[Some]
    will be changed to:
        response=PagedSome
    where Paged some will be a subclass of paginator.Output:
        class PagedSome:
            items: List[Some]
            count: int
    """
