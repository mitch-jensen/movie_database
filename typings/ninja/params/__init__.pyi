"""This type stub file was generated by pyright."""

from collections.abc import Callable
from re import Pattern
from typing import TYPE_CHECKING, Annotated, Any, TypeVar

from ninja.params import functions as param_functions

__all__ = ["Body", "BodyEx", "Cookie", "CookieEx", "File", "FileEx", "Form", "FormEx", "Header", "HeaderEx", "P", "Path", "PathEx", "Query", "QueryEx"]

class ParamShortcut:
    def __init__(self, base_func: Callable[..., Any]) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, args: Any) -> Any: ...

if TYPE_CHECKING:
    T = TypeVar("T")
    type Body[T] = Annotated[T, param_functions.Body()]
    type Cookie[T] = Annotated[T, param_functions.Cookie()]
    type File[T] = Annotated[T, param_functions.File()]
    type Form[T] = Annotated[T, param_functions.Form()]
    type Header[T] = Annotated[T, param_functions.Header()]
    type Path[T] = Annotated[T, param_functions.Path()]
    type Query[T] = Annotated[T, param_functions.Query()]
else: ...

def P(
    *,
    alias: str | None = ...,
    title: str | None = ...,
    description: str | None = ...,
    gt: float | None = ...,
    ge: float | None = ...,
    lt: float | None = ...,
    le: float | None = ...,
    min_length: int | None = ...,
    max_length: int | None = ...,
    pattern: str | Pattern[str] | None = ...,
    example: Any = ...,
    examples: dict[str, Any] | None = ...,
    deprecated: bool | None = ...,
    include_in_schema: bool = ...,
    **extra: Any,
) -> dict[str, Any]:
    """Arguments for BodyEx, QueryEx, etc."""
