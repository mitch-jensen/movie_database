"""This type stub file was generated by pyright."""

from abc import ABC, abstractmethod
from re import Pattern
from typing import TYPE_CHECKING, Any, Self, TypeVar

from django.http import HttpRequest
from ninja import NinjaAPI
from ninja.types import DictStrAny
from pydantic import BaseModel
from pydantic.fields import FieldInfo

if TYPE_CHECKING: ...
__all__ = ["BodyModel", "CookieModel", "FileModel", "FormModel", "HeaderModel", "ParamModel", "PathModel", "QueryModel"]
TModel = TypeVar("TModel", bound=ParamModel)
type TModels[TModel: ParamModel] = list[TModel]

def NestedDict() -> DictStrAny: ...

class ParamModel(BaseModel, ABC):
    __ninja_param_source__ = ...
    @classmethod
    @abstractmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> DictStrAny | None: ...
    @classmethod
    def resolve(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> Self: ...

class QueryModel(ParamModel):
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> DictStrAny | None: ...

class PathModel(ParamModel):
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> DictStrAny | None: ...

class HeaderModel(ParamModel):
    __ninja_flatten_map__: DictStrAny
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> DictStrAny | None: ...

class CookieModel(ParamModel):
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> DictStrAny | None: ...

class BodyModel(ParamModel):
    __read_from_single_attr__: str
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> DictStrAny | None: ...

class FormModel(ParamModel):
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> DictStrAny | None: ...

class FileModel(ParamModel):
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> DictStrAny | None: ...

class _HttpRequest(HttpRequest):
    body: bytes = ...

class _MultiPartBodyModel(BodyModel):
    __ninja_body_params__: DictStrAny
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> DictStrAny | None: ...

class Param(FieldInfo):
    def __init__(
        self,
        default: Any,
        *,
        alias: str | None = ...,
        title: str | None = ...,
        description: str | None = ...,
        gt: float | None = ...,
        ge: float | None = ...,
        lt: float | None = ...,
        le: float | None = ...,
        min_length: int | None = ...,
        max_length: int | None = ...,
        example: Any | None = ...,
        examples: dict[str, Any] | None = ...,
        deprecated: bool | None = ...,
        include_in_schema: bool | None = ...,
        pattern: str | Pattern[str] | None = ...,
        **extra: Any,
    ) -> None: ...

class Path(Param):
    _model = PathModel

class Query(Param):
    _model = QueryModel

class Header(Param):
    _model = HeaderModel

class Cookie(Param):
    _model = CookieModel

class Body(Param):
    _model = BodyModel

class Form(Param):
    _model = FormModel

class File(Param):
    _model = FileModel

class _MultiPartBody(Param):
    _model = _MultiPartBodyModel
