"""This type stub file was generated by pyright."""

from collections.abc import Generator
from typing import TYPE_CHECKING, Any

from ninja import NinjaAPI
from ninja.operation import Operation
from ninja.types import DictStrAny

if TYPE_CHECKING: ...
REF_TEMPLATE: str = ...
BODY_CONTENT_TYPES: dict[str, str] = ...

def get_schema(api: NinjaAPI, path_prefix: str = ...) -> OpenAPISchema: ...

bold_red_style = ...

class OpenAPISchema(dict):
    def __init__(self, api: NinjaAPI, path_prefix: str) -> None: ...
    def get_paths(self) -> DictStrAny: ...
    def methods(self, operations: list) -> DictStrAny: ...
    def deep_dict_update(self, main_dict: dict[Any, Any], update_dict: dict[Any, Any]) -> None: ...
    def operation_details(self, operation: Operation) -> DictStrAny: ...
    def operation_parameters(self, operation: Operation) -> list[DictStrAny]: ...
    def request_body(self, operation: Operation) -> DictStrAny: ...
    def responses(self, operation: Operation) -> dict[int, DictStrAny]: ...
    def operation_security(self, operation: Operation) -> list[DictStrAny] | None: ...
    def get_components(self) -> DictStrAny: ...
    def add_schema_definitions(self, definitions: dict) -> None: ...

def flatten_properties(prop_name: str, prop_details: DictStrAny, prop_required: bool, definitions: DictStrAny) -> Generator[tuple[str, DictStrAny, bool]]:
    """Extracts all nested model's properties into flat properties
    (used f.e. in GET params with multiple arguments and models)
    """

def resolve_allOf(details: DictStrAny, definitions: DictStrAny) -> None:
    """Resolves all $ref's in 'allOf' section"""

def merge_schemas(schemas: list[DictStrAny]) -> DictStrAny: ...
