"""This type stub file was generated by pyright."""

from typing import TYPE_CHECKING, Generic, TypeVar

import pydantic
from ninja import NinjaAPI
from ninja.params.models import ParamModel
from ninja.types import DictStrAny

if TYPE_CHECKING: ...
__all__ = ["AuthenticationError", "AuthorizationError", "ConfigError", "HttpError", "ValidationError", "set_default_exc_handlers"]
logger = ...

class ConfigError(Exception): ...

TModel = TypeVar("TModel", bound=ParamModel)

class ValidationErrorContext(Generic[TModel]):
    """The full context of a `pydantic.ValidationError`, including all information
    needed to produce a `ninja.errors.ValidationError`.
    """

    def __init__(self, pydantic_validation_error: pydantic.ValidationError, model: TModel) -> None: ...

class ValidationError(Exception):
    """This exception raised when operation params do not validate
    Note: this is not the same as pydantic.ValidationError
    the errors attribute as well holds the location of the error(body, form, query, etc.)
    """

    def __init__(self, errors: list[DictStrAny]) -> None: ...

class HttpError(Exception):
    def __init__(self, status_code: int, message: str) -> None: ...

class AuthenticationError(HttpError):
    def __init__(self, status_code: int = ..., message: str = ...) -> None: ...

class AuthorizationError(HttpError):
    def __init__(self, status_code: int = ..., message: str = ...) -> None: ...

class Throttled(HttpError):
    def __init__(self, wait: int | None) -> None: ...

def set_default_exc_handlers(api: NinjaAPI) -> None: ...
