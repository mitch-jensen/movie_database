"""This type stub file was generated by pyright."""

from collections.abc import Callable, Sequence
from typing import TYPE_CHECKING, Any, TypeVar

from django.http import HttpRequest, HttpResponse
from django.urls import URLPattern, URLResolver
from ninja.constants import NOT_SET_TYPE
from ninja.errors import ValidationError, ValidationErrorContext
from ninja.openapi.docs import DocsBase
from ninja.openapi.schema import OpenAPISchema
from ninja.parser import Parser
from ninja.renderers import BaseRenderer
from ninja.router import Router
from ninja.throttling import BaseThrottle
from ninja.types import DictStrAny, TCallable

from .operation import Operation

if TYPE_CHECKING: ...
__all__ = ["NinjaAPI"]
_E = TypeVar("_E", bound=Exception)
type Exc[_E: Exception] = _E | type[_E]
type ExcHandler[_E: Exception] = Callable[[HttpRequest, Exc[_E]], HttpResponse]

class NinjaAPI:
    """Ninja API"""

    _registry: list[str] = ...
    def __init__(
        self,
        *,
        title: str = ...,
        version: str = ...,
        description: str = ...,
        openapi_url: str | None = ...,
        docs: DocsBase = ...,
        docs_url: str | None = ...,
        docs_decorator: Callable[[TCallable], TCallable] | None = ...,
        servers: list[DictStrAny] | None = ...,
        urls_namespace: str | None = ...,
        csrf: bool = ...,
        auth: Sequence[Callable] | Callable | NOT_SET_TYPE | None = ...,
        throttle: BaseThrottle | list[BaseThrottle] | NOT_SET_TYPE = ...,
        renderer: BaseRenderer | None = ...,
        parser: Parser | None = ...,
        default_router: Router | None = ...,
        openapi_extra: dict[str, Any] | None = ...,
    ) -> None:
        """Args:
        title: A title for the api.
        description: A description for the api.
        version: The API version.
        urls_namespace: The Django URL namespace for the API. If not provided, the namespace will be ``"api-" + self.version``.
        openapi_url: The relative URL to serve the openAPI spec.
        openapi_extra: Additional attributes for the openAPI spec.
        docs_url: The relative URL to serve the API docs.
        servers: List of target hosts used in openAPI spec.
        csrf: Require a CSRF token for unsafe request types. See <a href="../csrf">CSRF</a> docs.
        auth (Callable | Sequence[Callable] | NOT_SET | None): Authentication class
        renderer: Default response renderer
        parser: Default request parser

        """

    def get(
        self,
        path: str,
        *,
        auth: Any = ...,
        throttle: BaseThrottle | list[BaseThrottle] | NOT_SET_TYPE = ...,
        response: Any = ...,
        operation_id: str | None = ...,
        summary: str | None = ...,
        description: str | None = ...,
        tags: list[str] | None = ...,
        deprecated: bool | None = ...,
        by_alias: bool | None = ...,
        exclude_unset: bool | None = ...,
        exclude_defaults: bool | None = ...,
        exclude_none: bool | None = ...,
        url_name: str | None = ...,
        include_in_schema: bool = ...,
        openapi_extra: dict[str, Any] | None = ...,
    ) -> Callable[[TCallable], TCallable]:
        """`GET` operation. See <a href="../operations-parameters">operations
        parameters</a> reference.
        """

    def post(
        self,
        path: str,
        *,
        auth: Any = ...,
        throttle: BaseThrottle | list[BaseThrottle] | NOT_SET_TYPE = ...,
        response: Any = ...,
        operation_id: str | None = ...,
        summary: str | None = ...,
        description: str | None = ...,
        tags: list[str] | None = ...,
        deprecated: bool | None = ...,
        by_alias: bool | None = ...,
        exclude_unset: bool | None = ...,
        exclude_defaults: bool | None = ...,
        exclude_none: bool | None = ...,
        url_name: str | None = ...,
        include_in_schema: bool = ...,
        openapi_extra: dict[str, Any] | None = ...,
    ) -> Callable[[TCallable], TCallable]:
        """`POST` operation. See <a href="../operations-parameters">operations
        parameters</a> reference.
        """

    def delete(
        self,
        path: str,
        *,
        auth: Any = ...,
        throttle: BaseThrottle | list[BaseThrottle] | NOT_SET_TYPE = ...,
        response: Any = ...,
        operation_id: str | None = ...,
        summary: str | None = ...,
        description: str | None = ...,
        tags: list[str] | None = ...,
        deprecated: bool | None = ...,
        by_alias: bool | None = ...,
        exclude_unset: bool | None = ...,
        exclude_defaults: bool | None = ...,
        exclude_none: bool | None = ...,
        url_name: str | None = ...,
        include_in_schema: bool = ...,
        openapi_extra: dict[str, Any] | None = ...,
    ) -> Callable[[TCallable], TCallable]:
        """`DELETE` operation. See <a href="../operations-parameters">operations
        parameters</a> reference.
        """

    def patch(
        self,
        path: str,
        *,
        auth: Any = ...,
        throttle: BaseThrottle | list[BaseThrottle] | NOT_SET_TYPE = ...,
        response: Any = ...,
        operation_id: str | None = ...,
        summary: str | None = ...,
        description: str | None = ...,
        tags: list[str] | None = ...,
        deprecated: bool | None = ...,
        by_alias: bool | None = ...,
        exclude_unset: bool | None = ...,
        exclude_defaults: bool | None = ...,
        exclude_none: bool | None = ...,
        url_name: str | None = ...,
        include_in_schema: bool = ...,
        openapi_extra: dict[str, Any] | None = ...,
    ) -> Callable[[TCallable], TCallable]:
        """`PATCH` operation. See <a href="../operations-parameters">operations
        parameters</a> reference.
        """

    def put(
        self,
        path: str,
        *,
        auth: Any = ...,
        throttle: BaseThrottle | list[BaseThrottle] | NOT_SET_TYPE = ...,
        response: Any = ...,
        operation_id: str | None = ...,
        summary: str | None = ...,
        description: str | None = ...,
        tags: list[str] | None = ...,
        deprecated: bool | None = ...,
        by_alias: bool | None = ...,
        exclude_unset: bool | None = ...,
        exclude_defaults: bool | None = ...,
        exclude_none: bool | None = ...,
        url_name: str | None = ...,
        include_in_schema: bool = ...,
        openapi_extra: dict[str, Any] | None = ...,
    ) -> Callable[[TCallable], TCallable]:
        """`PUT` operation. See <a href="../operations-parameters">operations
        parameters</a> reference.
        """

    def api_operation(
        self,
        methods: list[str],
        path: str,
        *,
        auth: Any = ...,
        throttle: BaseThrottle | list[BaseThrottle] | NOT_SET_TYPE = ...,
        response: Any = ...,
        operation_id: str | None = ...,
        summary: str | None = ...,
        description: str | None = ...,
        tags: list[str] | None = ...,
        deprecated: bool | None = ...,
        by_alias: bool | None = ...,
        exclude_unset: bool | None = ...,
        exclude_defaults: bool | None = ...,
        exclude_none: bool | None = ...,
        url_name: str | None = ...,
        include_in_schema: bool = ...,
        openapi_extra: dict[str, Any] | None = ...,
    ) -> Callable[[TCallable], TCallable]: ...
    def add_router(
        self,
        prefix: str,
        router: Router | str,
        *,
        auth: Any = ...,
        throttle: BaseThrottle | list[BaseThrottle] | NOT_SET_TYPE = ...,
        tags: list[str] | None = ...,
        parent_router: Router | None = ...,
    ) -> None: ...
    @property
    def urls(self) -> tuple[list[URLResolver | URLPattern], str, str]:
        """str: URL configuration

        Returns:
            Django URL configuration

        """

    def get_root_path(self, path_params: DictStrAny) -> str: ...
    def create_response(self, request: HttpRequest, data: Any, *, status: int | None = ..., temporal_response: HttpResponse | None = ...) -> HttpResponse: ...
    def create_temporal_response(self, request: HttpRequest) -> HttpResponse: ...
    def get_content_type(self) -> str: ...
    def get_openapi_schema(self, *, path_prefix: str | None = ..., path_params: DictStrAny | None = ...) -> OpenAPISchema: ...
    def get_openapi_operation_id(self, operation: Operation) -> str: ...
    def get_operation_url_name(self, operation: Operation, router: Router) -> str:
        """Get the default URL name to use for an operation if it wasn't
        explicitly provided.
        """

    def add_exception_handler(self, exc_class: type[_E], handler: ExcHandler[_E]) -> None: ...
    def exception_handler(self, exc_class: type[Exception]) -> Callable[[TCallable], TCallable]: ...
    def set_default_exception_handlers(self) -> None: ...
    def on_exception(self, request: HttpRequest, exc: Exc[_E]) -> HttpResponse: ...
    def validation_error_from_error_contexts(self, error_contexts: list[ValidationErrorContext]) -> ValidationError: ...

_imported_while_running_in_debug_server = ...

def debug_server_url_reimport() -> bool:
    """Detect reimport of URL module to allow error to propagate to developer.

    When Django loads urls it uses: ``django.urls.resolvers.urlconf_module()``

    ```Python
    @cached_property
    def urlconf_module(self):
        if isinstance(self.urlconf_name, str):
            return import_module(self.urlconf_name)
        else:
            return self.urlconf_name
    ```

    This uses ``@cached_property`` to generally only import once.  But if the
    import throws an error when using the development server, the following
    code in ``django.utils.autoreload.BaseReloader.run()`` is used:

    ```Python
    # Prevent a race condition where URL modules aren't loaded when the
    # reloader starts by accessing the urlconf_module property.
    try:
        get_resolver().urlconf_module
    except Exception:
        # Loading the urlconf can result in errors during development.
        # If this occurs then swallow the error and continue.
        pass
    ```

    This means the (likely) developer error that caused the Exception is
    initially ignored. This is not generally a problem since the error will
    usually be exercised again, and reported at that time.  But Ninja has
    various code which guards against errors where items that cannot be reused,
    are attempted to be reused.  This results in Ninja throwing a false error,
    and hiding the true error from the developer when running under the
    development server.

    Returns:
        True if this module was originally imported during Django dev-server
        init but the caller is not being running during Django dev-server init.

    """
