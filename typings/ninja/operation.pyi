"""This type stub file was generated by pyright."""

from collections.abc import Callable, Sequence
from typing import TYPE_CHECKING, Any

from django.http import HttpRequest, HttpResponse
from django.http.response import HttpResponseBase
from ninja import NinjaAPI, Router
from ninja.constants import NOT_SET_TYPE
from ninja.throttling import BaseThrottle

if TYPE_CHECKING: ...
__all__ = ["Operation", "PathView", "ResponseObject"]

class Operation:
    def __init__(
        self,
        path: str,
        methods: list[str],
        view_func: Callable,
        *,
        auth: Sequence[Callable] | Callable | NOT_SET_TYPE | None = ...,
        throttle: BaseThrottle | list[BaseThrottle] | NOT_SET_TYPE = ...,
        response: Any = ...,
        operation_id: str | None = ...,
        summary: str | None = ...,
        description: str | None = ...,
        tags: list[str] | None = ...,
        deprecated: bool | None = ...,
        by_alias: bool | None = ...,
        exclude_unset: bool | None = ...,
        exclude_defaults: bool | None = ...,
        exclude_none: bool | None = ...,
        include_in_schema: bool = ...,
        url_name: str | None = ...,
        openapi_extra: dict[str, Any] | None = ...,
    ) -> None: ...
    def run(self, request: HttpRequest, **kw: Any) -> HttpResponseBase: ...
    def set_api_instance(self, api: NinjaAPI, router: Router) -> None: ...

class AsyncOperation(Operation):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    async def run(self, request: HttpRequest, **kw: Any) -> HttpResponseBase: ...

class PathView:
    def __init__(self) -> None: ...
    def add_operation(
        self,
        path: str,
        methods: list[str],
        view_func: Callable,
        *,
        auth: Sequence[Callable] | Callable | NOT_SET_TYPE | None = ...,
        throttle: BaseThrottle | list[BaseThrottle] | NOT_SET_TYPE = ...,
        response: Any = ...,
        operation_id: str | None = ...,
        summary: str | None = ...,
        description: str | None = ...,
        tags: list[str] | None = ...,
        deprecated: bool | None = ...,
        by_alias: bool | None = ...,
        exclude_unset: bool | None = ...,
        exclude_defaults: bool | None = ...,
        exclude_none: bool | None = ...,
        url_name: str | None = ...,
        include_in_schema: bool = ...,
        openapi_extra: dict[str, Any] | None = ...,
    ) -> Operation: ...
    def set_api_instance(self, api: NinjaAPI, router: Router) -> None: ...
    def get_view(self) -> Callable: ...

class ResponseObject:
    """Basically this is just a helper to be able to pass response to pydantic's model_validate"""

    def __init__(self, response: HttpResponse) -> None: ...
