"""This type stub file was generated by pyright."""

import inspect
from collections.abc import Callable
from typing import Any

from django.urls.converters import UUIDConverter
from ninja.types import DictStrAny

__all__ = ["get_path_param_names", "get_typed_annotation", "get_typed_signature", "is_async", "make_forwardref"]

def get_typed_signature(call: Callable[..., Any]) -> inspect.Signature:
    """Finds call signature and resolves all forwardrefs"""

def get_typed_annotation(param: inspect.Parameter, globalns: DictStrAny) -> Any: ...
def make_forwardref(annotation: str, globalns: DictStrAny) -> Any: ...
def get_path_param_names(path: str) -> set[str]:
    """Turns path string like /foo/{var}/path/{int:another}/end to set {'var', 'another'}"""

def is_async(callable: Callable[..., Any]) -> bool: ...
def has_kwargs(func: Callable[..., Any]) -> bool: ...
def get_args_names(func: Callable[..., Any]) -> list[str]:
    """Returns list of function argument names"""

class UUIDStrConverter(UUIDConverter):
    """Return a path converted UUID as a str instead of the standard UUID"""

    def to_python(self, value: str) -> str: ...
