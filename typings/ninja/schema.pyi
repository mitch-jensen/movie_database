"""This type stub file was generated by pyright."""

from collections.abc import Callable
from typing import Any, Self, TypeVar, dataclass_transform, no_type_check

from ninja.types import DictStrAny
from pydantic import BaseModel, Field
from pydantic._internal._model_construction import ModelMetaclass
from pydantic.json_schema import GenerateJsonSchema, JsonSchemaValue

"""
Since "Model" word would be very confusing when used in django context, this
module basically makes an alias for it named "Schema" and adds extra whistles to
be able to work with django querysets and managers.

The schema is a bit smarter than a standard pydantic Model because it can handle
dotted attributes and resolver methods. For example::


    class UserSchema(User):
        name: str
        initials: str
        boss: str = Field(None, alias="boss.first_name")

        @staticmethod
        def resolve_name(obj):
            return f"{obj.first_name} {obj.last_name}"

"""
pydantic_version = ...
__all__ = ["BaseModel", "DjangoGetter", "Field", "Schema", "validator"]
S = TypeVar("S", bound=Schema)

class DjangoGetter:
    __slots__ = ...
    def __init__(self, obj: Any, schema_cls: type[S], context: Any = ...) -> None: ...
    def __getattr__(self, key: str) -> Any: ...

class Resolver:
    __slots__ = ...
    _static: bool
    _func: Any
    _takes_context: bool
    def __init__(self, func: Callable | staticmethod) -> None: ...
    def __call__(self, getter: DjangoGetter) -> Any: ...

@dataclass_transform(kw_only_default=True, field_specifiers=(Field,))
class ResolverMetaclass(ModelMetaclass):
    _ninja_resolvers: dict[str, Resolver]
    @no_type_check
    def __new__(cls, name, bases, namespace, **kwargs):  # -> type:
        ...

class NinjaGenerateJsonSchema(GenerateJsonSchema):
    def default_schema(self, schema: Any) -> JsonSchemaValue: ...

class Schema(BaseModel, metaclass=ResolverMetaclass):
    class Config:
        from_attributes = ...

    @classmethod
    def from_orm(cls, obj: Any, **kw: Any) -> Self: ...
    def dict(self, *a: Any, **kw: Any) -> DictStrAny:
        """Backward compatibility with pydantic 1.x"""

    @classmethod
    def json_schema(cls) -> DictStrAny: ...
    @classmethod
    def schema(cls) -> DictStrAny: ...
